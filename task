

1.2018.4.16 搞懂前端发起 API 请求，后端是如何接收到请求并返回结果的，这中间有很多步骤？
2.2018.4.19 有一个需求是监控我们六台服务器的 cpu、内存和磁盘(每台机器两块盘)使用率，你写个脚本定时获取这几样数据写入文件，然后用咱们产品做采集并加入监控，告警人填超管、我和你？2018.4.21看结果
			定时功能：
				crontab -e
				service crond restart

部署配置文件位置：/etc/rsyslog.d
#! /usr/bin/env python
# _*_ coding:utf-8 _*_
#内存使用率
import commands
import json
from datetime import datetime
def memory_stat():
        mem = {}
        f = open("/proc/meminfo")
        lines = f.readlines()
        f.close()
        for line in lines:
                name = line.split(':')[0]
                var = line.split(':')[1].split()[0]
                mem[name] = long(var) * 1024.0
        mem_use =  mem['MemAvailable'] / mem['MemTotal'] *100
        return mem_use
#cpu使用率
#CPU指标：user，nice, system, idle, iowait, irq, softirq
def cpu_stat():
        import time
        def cpu_r():
                f = open("/proc/stat")
                for f_line in f:
                        break
                f.close()
                f_line = f_line.split()
                f_line_a = []
                for i in f_line:
                        if i.isdigit():
                                i = int(i)
                                f_line_a.append(i)
                total = sum(f_line_a)
                idle = f_line_a[3]
                return total,idle
        total_a,idle_a = cpu_r()
        time.sleep(2)
        total_b,idle_b = cpu_r()
        sys_idle = idle_b - idle_a
        sys_total = total_b - total_a
        sys_us = sys_total - sys_idle
        cpu_use= (float(sys_us) / sys_total) * 100
        return cpu_use
def disk_stat():
        import commands
        f = commands.getstatusoutput('df -hl | grep ^/dev/*')
        dev = f[1].split('\n')
        disk_use = {}
        for i in dev:
                name = i.split()[0]
                var = i.split()[4]
                disk_use[name] = float(var.split('%')[0])
        return disk_use



if __name__ == "__main__":
        mem_use = memory_stat()
        cpu_use = cpu_stat()
        disk_use = disk_stat()
        d = {}
        #d['time'] = str(datetime.now())
        d['mem_use'] = float(mem_use)
        d['cpu_use'] = float(cpu_use)
        d = dict(d,**disk_use)
        json_log = json.dumps(d)

        with open('/root/test/catchinfo_log','a') as f:
                f.write(str(datetime.now())+' '+json_log+'\n')

3.2018.4.21熟悉   wc ,cut ,awk ,sort ,uqic ,tail ,head ,tail -f ,du ,df ,date ,time
        dict ,set ,list curd+iter  iteritem     iterkeys  itervalues
        range /xrange区别 2018.4.25号前完成

        wc:
                wc(Word Count)命令的功能为统计指定文件中的字节数、字数、行数，并将统计结果显示输出
                wc[选项]文件
                参数-c字节数；-l行数；-m字符数；-w字数，一个字被定义为由空白，跳格或换行字符分割的字符串；-L打印最长行的长度（字节数）；从标准输入读取：输入完enter+catr+d
        cut：
                cut命令是一个选取命令，其功能是将文件中的每一行”字节” ”字符” ”字段” 进行剪切，选取我们需要的，并将这些选取好的数据输出至标准输出
                cut -b 1,3,5  test.txt 剪切每一行的第1，3，5个字节
                cut -nb 1,3,5  test.txt剪切每一行的第1，3，5个字符
                cut -c 1，3，5  test.txt 剪切每一行的第1，3，5个字符
                cat test.txt | cut -d : -f 1   剪切test.txt文档中以：分割，第一个域f 1的值,-f 2表示第二个域（也就是第1，2个：之间的东西）
        awk:
                awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说AWK就是把文件逐行读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理
                awk '{pattern + action}' {filenames}
                $0变量是指整条记录。$1表示当前行的第一个域,$2表示当前行的第二个域
                cat /etc/passwd |awk  -F ':'  '{print $1}' #只是显示/etc/passwd的账户
                cat /etc/passwd |awk  -F ':'  '{print $1"\t"$7}'#只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以tab键分割
                cat /etc/passwd |awk  -F ':'  'BEGIN {print "name,shell"}  {print $1","$7} END {print "blue,/bin/nosh"}'
                #如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加"blue,/bin/nosh"。
                awk工作流程是这样的：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域,随后开始执行模式所对应的动作action。
                接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。
                awk -F: '/root/' /etc/passwd#搜索/etc/passwd有root关键字的所有行   这种是pattern的使用示例，匹配了pattern(这里是root)的行才会执行action(没有指定action，默认输出每行的内容)。
                搜索支持正则，例如找root开头的: awk -F: '/^root/' /etc/passwd
                awk -F: '/root/{print $7}' /etc/passwd  #搜索/etc/passwd有root关键字的所有行，并显示对应的shell   这里指定了action{print $7}
                awk内置变量：
                        ARGC               命令行参数个数
                        ARGV               命令行参数排列
                        ENVIRON            支持队列中系统环境变量的使用
                        FILENAME           awk浏览的文件名
                        FNR                浏览文件的记录数
                        FS                 设置输入域分隔符，等价于命令行 -F选项
                        NF                 浏览记录的域的个数
                        NR                 已读的记录数
                        OFS                输出域分隔符
                        ORS                输出记录分隔符
                        RS                 控制记录分隔符
                        统计/etc/passwd:文件名，每行的行号，每行的列数，对应的完整行内容:
                        awk  -F ':'  '{print "filename:" FILENAME ",linenumber:" NR ",columns:" NF ",linecontent:"$0}' /etc/passwd
  
                        使用printf替代print,可以让代码更加简洁，易读
                        awk  -F ':'  '{printf("filename:%10s,linenumber:%s,columns:%s,linecontent:%s\n",FILENAME,NR,NF,$0)}' /etc/passwd

                        awk中同时提供了print和printf两种打印输出的函数。
                        其中print函数的参数可以是变量、数值或者字符串。字符串必须用双引号引用，参数用逗号分隔。如果没有逗号，参数就串联在一起而无法区分。这里，逗号的作用与输出文件的分隔符的作用是一样的，只是后者是空格而已。
                        printf函数，其用法和c语言中printf基本相似,可以格式化字符串,输出复杂时，printf更加好用，代码更易懂。
                awk编程：
                        除了awk的内置变量，awk还可以自定义变量。
                        下面统计/etc/passwd的账户人数
                        awk '{count++;print $0;} END{print "user count is ", count}' /etc/passwd#count是自定义变量。之前的action{}里都是只有一个print,其实print只是一个语句，而action{}可以有多个语句，以;号隔开。
                        这里没有初始化count，虽然默认是0，但是妥当的做法还是初始化为0:
                        awk 'BEGIN {count=0;print "[start]user count is ", count} {count=count+1;print $0;} END{print "[end]user count is ", count}' /etc/passwd
                        统计某个文件夹下的文件占用的字节数

                        ls -l |awk 'BEGIN {size=0;} {size=size+$5;} END{print "[end]size is ", size}'
                        [end]size is  8657198
                         

                        如果以M为单位显示:

                        ls -l |awk 'BEGIN {size=0;} {size=size+$5;} END{print "[end]size is ", size/1024/1024,"M"}' 
                        [end]size is  8.25889 M
                        注意，统计不包括文件夹的子目录。
                        条件语句：
                                统计某个文件夹下的文件占用的字节数,过滤4096大小的文件(一般都是文件夹):

                                ls -l |awk 'BEGIN {size=0;print "[start]size is ", size} {if($5!=4096){size=size+$5;}} END{print "[end]size is ", size/1024/1024,"M"}' 
                                [end]size is  8.22339 M
                        循环语句：
                                显示/etc/passwd的账户

                                awk -F ':' 'BEGIN {count=0;} {name[count] = $1;count++;}; END{for (i = 0; i < NR; i++) print i, name[i]}' /etc/passwd
        sort:
                将文本内容加以排序，sort可针对文本文件的内容，以行为单位来排序
                sort test.txt#1、sort将文件的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。
                sort -u test.txt#sort的-u 选项它的作用很简单，就是在输出行中去除重复行 同 uniq test.txt
                sort -n test.txt#sort的-n选项，你有没有遇到过10比2小的情况。我反正遇到过。出现这种情况是由于排序程序将这些数字按字符来排序了，排序程序会先比较1和2，显然1小，所以就将10放在2前面喽。这也是sort的一贯作风。
                sort -nr test.txt -o test.txt #sort的-o选项，想把排序结果输出到原文件中，用重定向可就不行了,-r表示降序排列
                sort的-t选项和-k选项:
                        sort提供了-t选项，后面可以设定间隔符。指定了间隔符之后，就可以用-k来指定列数了
                        sort -n -k 2 -t'-' test.txt      // -t<分隔字符>   指定排序时所用的栏位分隔字符。  -k  选择以哪个区间进行排序
                        2017-01-09
                        2017-04-24
                        2017-10-23
                        2017-12-02
                sort -t ' ' -k 1.2 facebook.txt#使用了-k 1.2，表示对第一个域的第二个字符开始到本域的最后一个字符为止的字符串进行排序。
                
                sort -t ' ' -k 1.2,1.2 -nrk 3,3 facebook.txt#只针对公司英文名称的第二个字母进行排序，如果相同的按照员工工资进行降序排序：
                        baidu 100 5000
                        google 110 5000
                        sohu 100 4500
                        guge 50 3000
                        由于只对第二个字母进行排序，所以我们使用了-k 1.2,1.2的表示方式，表示我们“只”对第二个字母进行排序。（如果你问“我使用-k 1.2怎么不行？”，当然不行，因为你省略了End部分，这就意味着你将对从第二个字母起到本域最后一个字符为止的字符串进行排序）。对于员工工资进行排 序，我们也使用了-k 3,3，这是最准确的表述，表示我们“只”对本域进行排序，因为如果你省略了后面的3，就变成了我们“对第3个域开始到最后一个域位置的内容进行排序” 了。
        uniq:
                用于报告或忽略文件中的重复行，一般与sort命令结合使用
                -c或——count：在每列旁边显示该行重复出现的次数；
                -d或--repeated：仅显示重复出现的行列；
                -f<栏位>或--skip-fields=<栏位>：忽略比较指定的栏位；
                -s<字符位置>或--skip-chars=<字符位置>：忽略比较指定的字符；
                -u或——unique：仅显示出一次的行列；
                -w<字符位置>或--check-chars=<字符位置>：指定要比较的字符。
                删除重复行：
                        uniq file.txt
                        sort file.txt | uniq
                        sort -u file.txt
                只显示单一行：
                        uniq -u file.txt
                        sort file.txt | uniq -u
                统计各行在文件中出现的次数：
                        sort file.txt | uniq -c
                在文件中找出重复的行：
                        sort file.txt | uniq -d
        tail:
                tail命令用于输入文件中的尾部内容。tail命令默认在屏幕上显示指定文件的末尾10行。如果给定的文件不止一个，则在显示的每个文件前面加一个文件名标题。如果没有指定文件或者文件名为“-”，则读取标准输入。
                tail file (显示文件file的最后10行)
                tail +20 file (显示文件file的内容，从第20行至文件末尾)
                tail -c 10 file (显示文件file的最后10个字符)
        head:
                head命令用于显示文件的开头的内容。在默认情况下，head命令显示文件的头10行内容
                -q 隐藏文件名
                -v 显示文件名
                -c 显示字节数
                -n 显示的行数
                head -c 100 test.txt#显示文件的前100个字节
                head -c -100 test.txt #显示除了最后100个字节以外的其他内容
                head -n  5 test.txt #显示文档的前5行
                head -n -5 test.txt #显示文件除了最后5行以外的内容
        tail -f :
                -f  用于循环读取文件的内容，监视文件的增长
                监视文件的内容并停止N秒后再次读取文件内容
                tail -f -s 3 /var/log/maillog

                 -F 与-f类似，区别在于当将监视的文件删除重建后-F仍能监视该文件内容-f则不行，-F有重试的功能，会不断重试
                
                tail :输出文件的最后几行。
                用于linux查看日志的时候很方便，假如日志文件为：Console.log
                用法：
                1. tail Console.log
                    输出文件最后10行的内容
                2.  tail -nf Console.log  --n为最后n行
                    输出文件最后n行的内容，同时监视文件的改变，只要文件有一变化就同步刷新并显示出来
                3.  tail -n 5 filename
                    输出文件最后5行的内容
                3.  tail -f filename
                    输出最后10行内容，同时监视文件的改变，只要文件有一变化就显示出来。
        du:
                Linux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是查看当前指定文件或目录(会递归显示子目录)占用磁盘空间大小，还是和df命令有一些区别的.
                du#显示目录或者文件所占空间
                du -s #只显示总和的大小
                du -h test#以方便阅读的方式显示
                du test test1#显示多个文件所占空间
        df：
                df命令用于显示磁盘分区上的可使用的磁盘空间。默认显示单位为KB。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。
                df #查看系统磁盘设备，默认是kb为单位
                df -h #以kb以上的单位来显示，可读性高
                df -a #查看全部文件系统
                df -i#以inode模式来显示磁盘使用情况。
                inode包含的信息：文件的字节数，拥有者id，组id，权限，改动时间，链接数，数据block的位置。相反是不表示文件大小。这就是为什么df -h和df -i 显示的结果是不一样的原因。
                在df -h 和df -i  显示使用率100%，基本解决方法都是删除文件。

                df -h   是去删除比较大无用的文件-----------大文件占用大量的磁盘容量。

                df -i    则去删除数量过多的小文件-----------过多的文件占用了大量的inode号。
        date:
                date 可以用来显示或设定系统的日期与时间
                date 命令的另一个扩展是 -d 选项，该选项非常有用。使用这个功能强大的选项，通过将日期作为引号括起来的参数提供，您可以快速地查明一个特定的日期。-d 选项还可以告诉您，相对于当前日期若干天的究竟是哪一天，从现在开始的若干天或若干星期以后，或者以前（过去）。通过将这个相对偏移使用引号括起来，作为 -d 选项的参数，就可以完成这项任务。
                -d<字符串>：显示字符串所指的日期与时间。字符串前后必须加上引号； 根据string展示时间
                -s<字符串>：根据字符串来设置日期与时间。字符串前后必须加上引号； 
                date -d '10 day' 或者 date -d '+10 day'#时间向后10天
                date -d '-2 weeks'#时间向前
                date -r'test'#显示文件最后的修改时间
                date -s '2018-4-2514:00:00'#根据string修改时间
                date '+%c'#显示当前日期和时间
                date --date 08:42:00#设定时间
                date '+%B %d'#显示月份和日数
                date '+%T%n%D'#显示时间后跳行，再显示目前日期
        time:
                time 命令常用于测量一个命令的运行时间
                type -a time#time is a shell keyword     time is /usr/bin/time

                time命令最常用的使用方式就是在其后面直接跟上命令和参数：

                time <command> [<arguments...>]
                time -p find . -name "mysql.sh" 

                在命令执行完成之后就会打印出CPU的使用情况：

                real    0m5.064s      <== 实际使用时间（real time） 
                user    0m0.020s     <== 用户态使用时间（the process spent in user mode） 
                sys     0m0.040s      <== 内核态使用时间（the process spent in kernel mode）

python:
        list:
                list 存储一系列有序集合，并且元素内容可变（可更改、删除、添加），并且可以使用+操作符进行list列表的串接
                >>> fruits=['apple','orange','pear','banana']
                >>> fruits.pop()        //删除末尾的元素
                >>> fruits.append('grapefruit')    //向列表末尾增添元素
                >>> fruits[-1]='pineapple'           //更改列表中的某一个值
                >>> fruits.insert(2,'watermelon')   //向列表中第二个元素位置插入一个元素
                >>> fruits.pop(2)         //删除指定位置的元素，用pop(i)
                可以利用切片操作符列出相邻的元素，fruits[start:stop]或者fruits[:stop]或者fruits[start:]这三种形式
        tuple:
                一旦被创建就是不可更改的;一旦tuple被创建，我们可以使用fruits[0]，fruits[-1]去正常的索引元素，但是不能更改元素。不可变的tuple有什么意义？因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。
                >>> fruits=('apple','pear','grape')
                fruits[0]='pineapple'#报错，不能更改
                >>> a,b,c=fruits#>>> a
                        'apple'
                        >>> b
                        'pear'
                        >>> c
                        'grape'
                注意：只有1个元素的tuple定义时必须加一个逗号，来消除歧义
                最后看一个“可变的”tuple：

                >>> t = ('a', 'b', ['A', 'B'])
                tuple所谓的“不变”是说，tuple的每个元素，指向永远不变
        dict:
                Dictionary存储了从一种对象（key）到另一种对象（value）的映射关系，key必须是不可变的对象（字符串、数字或者tuple），而value对象则是可变的任意数据类型。Dict的创建采用花括号
                注意：dict中的key的顺序不是固定的，即没有确定的元素顺序，编程的时候也不应该依赖于dict中的元素顺序。
                >>> studentsIds={'kuth':90,'turing':99,'nash':80}             
                >>> studentsIds['nash']=60   //更改元素的value值
                >>> del studentsIds['turing']   //删除某个指定元素
                >>> studentsIds['bug']=['time',90,(1,2)]   //添加某个元素，注意元素的value可以为任意数据类型
                >>> studentsIds.keys()     //列出dict的键值
                >>> studentsIds.values()  //列出dict的元素的值
                >>> studentsIds.items()   //列出dict的所有条目
                [('nash', 60), ('kuth', 90), ('bug', ['time', 90, (1, 2)])]
                在进行dict操作的时候，为避免key不存在而造成的错误，可以使用以下两个方法：
                        通过in来判断key是否存在：
                                >>>’nash‘ in studentsIds#True
                        通过dict提供的get方法，如果key不存在，可以返回None,或者自己指定的value
                                >>> studentsIds.get('nash')     //存在，则返回key对应的value
                                >>> studentsIds.get('tom',-1)  //不存在，则返回自定义的-1或者none（什么也不返回）
        set:
                set.discard()
                discard(ele)将一个元素从集合中移除
                set.remove()
                remove(ele)也是从集合中移除元素
                set.pop()
                pop()从集合中移除元素，并返回任意一个元素。pop和其他两个不同的是，不需要将删除的元素放在方法中。且该方法删除元素是从元素最上面依次删除。
                
                set是另一种包含无序不重复元素的数据结构，就如同dict中的key一样，只不过其相对于dict只有key，而没有与key相对应的value
                因此set中的元素和dict中的key一样，只能是string，number和tuple等不可变的元素，而不能是list。 
                在创建set的时候，需要提供一个list作为输入。
                >>> shapes=['circle','triangle','rectangle','circle']
                >>> setOfShapes=set(shapes)      //以list作为输入创建一个set  set(['circle', 'triangle', 'rectangle'])   //发现list中重复的元素已经被去除
                >>> setOfShapes.add('polygon')   //添加元素
                >>> setOfShapes.pop() //删除一个元素
                >>> 'circle' in setOfShapes          //判断元素是否在set中

                >>> favoriteShapes=['circle','triangle','hexagon']
                >>> setOfFavoriteShapes=set(favoriteShapes)
                >>> setOfShapes-setOfFavoriteShapes     //set由于是可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作
                set(['polygon', 'rectangle'])  #python3 就是{’polygon‘,'rectangle'}
                >>> setOfShapes&setOfFavoriteShapes
                set(['circle', 'triangle'])
                >>> setOfShapes|setOfFavoriteShapes
                set(['triangle', 'polygon', 'circle', 'hexagon', 'rectangle'])
        再议不可变对象:
                str是不变对象，而list是可变对象。对于可变对象，比如list，对list进行操作，list内部的内容是会变化的
                对于不变变量，调用对象的任何自身的方法，都不会更改该对象自身的内容，但这些方法会创建新的对象并返回，这就保证了不可变对象本身永远是不可变的。

        list、dict 、set 元素删除操作（python）
                list:

                        del list(key) 删除指定下标元素

                        pop（）删除最后一个数， list.pop()

                        remove()删除指定的一个值，list.remove(value)

                 
                dict:

                        pop()删除给定健对应的值，如：dict.pop(index)

                        clear()清空字典内容，dict.clear()

                        popitem()随机删除字典内容, dict.popitem()

                set:

                        set.discard()
                                discard(ele)将一个元素从集合中移除
                        set.remove()
                                remove(ele)也是从集合中移除元素
                        set.pop()
                                pop()从集合中移除元素，并返回任意一个元素。pop和其他两个不同的是，不需要将删除的元素放在方法中。且该方法删除元素是从元素最上面依次删除。
range 和 xrange的区别：python3 已经去掉xrange，全部用range代替

                1.range和xrange都是在循环中使用，输出结果一样。
                2.range返回的是一个list对象，而xrange返回的是一个生成器对象(xrange object)。
                3.xrange则不会直接生成一个list，而是每次调用返回其中的一个值，内存空间使用极少，因而性能非常好。

                range函数的说明，三个参数，分别代表开始，结束位置和步长
                        1.range([start], stop，[step])
                        start和step是可选项，没给出start时，从0开始；没给出step时，默认公差为1。
                        2.xrange([start], stop,[step])

iter函数：
        1，iter(object):
                object必须是集合对象，且支持迭代协议（iteration protocol）或者支持序列协议（sequence protocol）。

                说白了，也就是实现了__iter__()方法或者__getitem__()方法。
        2,iter(object, sentinel):
                如果传递了第二个参数，则object必须是一个可调用的对象（如，函数）。
                此时，iter创建了一个迭代器对象，每次调用这个迭代器对象的__next__()方法时，都会调用object。

                如果__next__的返回值等于sentinel，则抛出StopIteration异常，否则返回下一个值。

        dict 中 iterkeys()  iteritems() itervalues()

